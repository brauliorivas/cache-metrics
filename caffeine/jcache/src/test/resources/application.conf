caffeine.jcache {

  default {
    policy.maximum.size = 500
  }

  test-cache {
    store-by-value.enabled = true

    executor = com.github.benmanes.caffeine.jcache.configuration.TestExecutor
    scheduler = com.github.benmanes.caffeine.jcache.configuration.TestScheduler

    listeners = [caffeine.jcache.listeners.test-listener]

    read-through {
      enabled = true
      loader = com.github.benmanes.caffeine.jcache.configuration.TestCacheLoader
    }

    write-through {
      enabled = true
      writer = com.github.benmanes.caffeine.jcache.configuration.TestCacheWriter
    }

    monitoring {
      statistics = true
      management = true
      native-statistics = true
    }

    policy {
      lazy-expiration {
        creation = 1m
        update = 5m
        access = 10m
      }

      eager-expiration {
        after-write = 1m
        after-access = 5m
      }

      refresh {
        after-write = 30s
      }

      maximum {
        size = null
        weight = 1000
        weigher = com.github.benmanes.caffeine.jcache.configuration.TestWeigher
      }
    }
  }

  test-cache-2 {
    key-type = java.lang.String
    value-type = java.lang.Integer

    policy {
      eager-expiration.variable = com.github.benmanes.caffeine.jcache.configuration.TestExpiry
      lazy-expiration.access = null
      maximum.size = 1000
    }
  }

  test-cache-3 {
    key-type = java.lang.String
    value-type = java.lang.Integer

    store-by-value.strategy = null
    listeners = [caffeine.jcache.listeners.test-listener2]

    policy {
      lazy-expiration {
        creation = "eternal"
        update = "eternal"
        access = "eternal"
      }
    }
  }

  test-cache-4 {
    key-type = java.lang.String
    value-type = java.lang.Integer

    policy {
      lazy-expiration {
        creation = "eternal"
        update = 5m
        access = 10m
      }
    }
  }

  osgi-cache {
    key-type = java.lang.String
    value-type = java.lang.Integer
  }

  invalid-cache {
    key-type = java.lang.Foo
    value-type = java.lang.Bar
  }

  guice {
    read-through {
      enabled = true
      loader = "com.github.benmanes.caffeine.jcache.guice.JCacheGuiceTest$InjectedCacheLoader"
    }
  }

  listeners {
    test-listener {
      class = com.github.benmanes.caffeine.jcache.configuration.TestCacheEntryListener
      filter = com.github.benmanes.caffeine.jcache.configuration.TestCacheEntryEventFilter
      synchronous = true
      old-value-required = true
    }
    test-listener2 {
      class = com.github.benmanes.caffeine.jcache.configuration.TestCacheEntryListener
      synchronous = false
      old-value-required = false
    }
  }
}
