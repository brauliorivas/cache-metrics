####################################
#   Cache Simulator Config File    #
####################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

caffeine.simulator {
  actor {
    mailbox-size = 10
    batch-size = 1000
  }

  report {
    format = csv
    sort-by = hit rate
    ascending = true
    output = ./
  }

  random-seed = 1033096058
  maximum-size = 512

  policies = [
    linked.Lru,
    linked.Sieve,
  ]

  admission = [
    Always,
  ]

  membership {
    filter = caffeine
    fpp = 0.01
    expected-insertions-multiplier = 3.0

    fast-filter {
      type = blocked-bloom
      bits-per-key = 11
    }
  }

  sampled {
    size = 8
    strategy = guess
  }

  multi-queue {
    lifetime = 75
    num-queues = 8
    percent-out = 0.50
  }

  segmented-lru {
    percent-protected = 0.80
  }

  s4lru {
    # The number of segments
    levels = 4
  }

  two-queue {
    # The percentage for the IN queue
    percent-in = 0.20
    # The percentage for the OUT queue
    percent-out = 0.50
  }

  tu-queue {
    # The percentage for the HOT queue
    percent-hot = 0.33
    # The percentage for the WARM queue
    percent-warm = 0.33
  }

  s3fifo {
    # The percentage for the S queue
    percent-small = 0.10
    # The percentage for the G queue
    percent-ghost = 0.90
    # The promotion frequency threshold
    move-to-main-threshold = 1
    # The n-bit clock frequency for the S and M queues
    maximum-frequency = 3
  }

  tiny-lfu {
    # CountMinSketch: count-min-4 (4-bit), count-min-64 (64-bit)
    # Table: random-table, tiny-table, perfect-table
    # Clairvoyant: next access times comparison
    # Always: always admits (disablement)
    sketch = count-min-4

    # If increments are conservative by only updating the minimum counters for CountMin sketches
    count-min.conservative = false

    jitter {
      # When enabled an otherwise rejected candidate has a random chance of being admitted
      enabled = true
      # The threshold frequency of a warm candidate to give it a random admission
      threshold = 6
      # The admission probability
      probability = 0.0078125
    }

    count-min-64 {
      eps = 0.0001
      confidence = 0.99
    }

    count-min-4 {
      # periodic: Resets by periodically halving all counters
      # incremental: Resets by halving counters in an incremental sweep
      # climber or indicator: Resets periodically at an adaptive interval
      reset = periodic
      # The multiple of the maximum size determining the number of counters
      counters-multiplier = 1.0

      incremental {
        # The incremental reset interval (the number of additions before halving counters)
        interval = 16
      }

      periodic.doorkeeper {
        # When enabled the "counters-multiplier" should be reduced to determine the space savings
        enabled = false
      }
    }
  }

  feedback-tiny-lfu {
    # The maximum emphasis to give newly inserted entries
    maximum-insertion-gain = 5
    # The maximum size of the sample period
    maximum-sample-size = 256
    # The false positive probability of the adaptive filter
    adaptive-fpp = 0.03
  }

  window-tiny-lfu {
    # The percentage for the MAIN space (PROBATION + PROTECTED)
    percent-main = [0.99]
    # The percentage for the PROTECTED MAIN queue
    percent-main-protected = 0.80
  }

  lru-window-tiny-lfu {
    # The percentage for the MAIN queue
    percent-main = [0.99]
  }

  random-window-tiny-lfu {
    # The percentage for the MAIN space
    percent-main = [0.99]
  }

  fully-segmented-window-tiny-lfu {
    # The percentage for the MAIN space (PROBATION + PROTECTED)
    percent-main = [0.99]
    # The percentage for the PROTECTED MAIN queue
    percent-main-protected = 0.80
    # The percentage for the PROTECTED WINDOW queue
    percent-window-protected = 0.80
  }

  s4-window-tiny-lfu {
    # The percentage for the MAIN queue
    percent-main = [0.99]
    # The number of segments in the MAIN space
    levels = 4
  }

  feedback-window-tiny-lfu {
    # The initial percentage for the MAIN space (PROBATION + PROTECTED)
    percent-main = [0.99]
    # The initial percentage for the PROTECTED MAIN queue
    percent-main-protected = 0.80
    # The initial percentage of the WINDOW space that can be pivoted
    percent-pivot = 0.0
    # The amount to increase the window when adapting
    pivot-increment = 8
    # The amount to decrease the window when adapting
    pivot-decrement = 4
    # The maximum size of the WINDOW space
    maximum-window-size = 256
    # The maximum size of the sample period
    maximum-sample-size = 1024
    # The false positive probability of the adaptive filter
    adaptive-fpp = 0.03
  }

  hill-climber-window-tiny-lfu {
    # The initial percentage for the MAIN space (PROBATION + PROTECTED)
    percent-main = [0.99]
    # The initial percentage for the PROTECTED MAIN queue
    percent-main-protected = 0.80

    # simple: Moves a fixed amount based on if the current direction had a positive impact
    # simulated-annealing: A simple hill climber that cools off, reducing the step size
    # stochastic-gradient-descent: Uses the gradient and momentum to walk the curve
    # adam, nadam, amsgrad: SGD with adaptive step sizes
    # indicator: Computes the best configuration based on a sampled skew
    # minisim: Simulates multiple configurations and chooses the best one
    strategy = [
      simple,
      indicator,
    ]

    simple {
      # The percent of the total size to adapt the window by
      percent-pivot = 0.0625
      # The size of the sample period (1.0 = 100%)
      percent-sample = 10.0
      # The difference in hit rate percentage to tolerate before changing directions
      tolerance = 0.0
      # The rate to decrease the step size to adapt by
      step-decay-rate = 0.98
      # The rate to decrease the sampling period
      sample-decay-rate = 1.0
      # The difference in hit rate percentage to tolerate before restarting the adaption
      restart-threshold = 0.05
    }

    simulated-annealing {
      # The percent of the total size to adapt the window by
      percent-pivot = 0.0625
      # The size of the sample period (1.0 = 100%)
      percent-sample = 10.0
      # The difference in hit rate to tolerate before cooling down
      cool-down-tolerance = 0.0
      # The cool down rate
      cool-down-rate = 0.9
      # The minimum temperature, at which point annealing halts
      min-temperature = 0.00001
      # The difference in hit rate to tolerate before restarting
      restart-tolerance = 0.03
      # The chance for a random restart
      random-restart = 0.01
    }

    stochastic-gradient-descent {
      # The percent of the total size to adapt the window by
      percent-pivot = 0.005
      # The size of the sample period (1.0 = 100%)
      percent-sample = 0.05
      # none, momentum, nesterov
      acceleration = momentum
      # The force of acceleration
      beta = 0.9
    }

    adam {
      # The percent of the total size to adapt the window by
      percent-pivot = 0.005
      # The size of the sample period (1.0 = 100%)
      percent-sample = 0.05
      # The decay rate of the momentum
      beta1 = 0.9
      # The decay rate of the velocity
      beta2 = 0.999
      # The fuzz factor for stability
      epsilon = 1e-8
    }

    nadam {
      # The percent of the total size to adapt the window by
      percent-pivot = 0.005
      # The size of the sample period (1.0 = 100%)
      percent-sample = 0.05
      # The decay rate of the momentum
      beta1 = 0.9
      # The decay rate of the velocity
      beta2 = 0.999
      # The fuzz factor for stability
      epsilon = 1e-8
    }

    amsgrad {
      # The percent of the total size to adapt the window by
      percent-pivot = 0.005
      # The size of the sample period (1.0 = 100%)
      percent-sample = 0.05
      # The decay rate of the momentum
      beta1 = 0.9
      # The decay rate of the velocity
      beta2 = 0.999
      # The fuzz factor for stability
      epsilon = 1e-8
    }

    minisim {
      # The period length of the minisim adaptation
      period = 1000000
    }
  }

  indicator {
    # Skew estimation is based on the top-k items
    k = 70
    # The size of the stream summary sketch
    ss-size = 1000
  }

  frd {
    # The percentage for the MAIN queue
    percent-main = 0.90

    # The period length of the indicator adaptation
    period = 50000
  }

  lirs {
    # The percentage for the HOT queue
    percent-hot = 0.99
    # The multiple of the maximum size dedicated to non-resident entries
    non-resident-multiplier = 2.0
  }

  clockpro {
    # The percentage for the minimum resident cold entries
    percent-min-resident-cold = 0.01
    # The percentage for the maximum resident cold entries
    percent-max-resident-cold = 0.99
    # The lower bound for the number of resident cold entries
    lower-bound-resident-cold = 2
    # The multiple of the maximum size dedicated to non-resident entries
    non-resident-multiplier = 2.0
  }

  clockproplus {
    # The percentage for the minimum resident cold entries
    percent-min-resident-cold = 0.01
    # The percentage for the maximum resident cold entries
    percent-max-resident-cold = 0.5
    # The lower bound for the number of resident cold entries
    lower-bound-resident-cold = 2
    # The multiple of the maximum size dedicated to non-resident entries
    non-resident-multiplier = 1.0
  }

  dclock {
    percent-active = [ 0.5, 0.99 ]
  }

  coherence {
    policy = [ hybrid, lfu, lru ]
  }

  hazelcast {
    policy = [ random, lru, lfu ]
  }

  expiring-map {
    policy = [ lru ]
  }

  tcache {
    policy = [ lru, lfu ]
  }

  gd-wheel {
    wheels = 2
    queues = 256
  }

  camp {
    precision = 5
  }

  trace {
    source = files
    skip = 0
    limit = null
  }

  files {
    paths = [
      "twitter:cluster26.000.gz",
      "twitter:cluster26.001.gz",
      "twitter:cluster26.002.gz",
      "twitter:cluster26.003.gz"
    ]
  }
}
